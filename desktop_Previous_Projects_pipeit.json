{"data": "# pipeit\n\n.VERSION | LICENCE | VERSION | PUBLISH | BUILD\n:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:\n![fury](https://badge.fury.io/py/pipeit.svg)  |  ![licence](https://img.shields.io/github/license/GoodManWEN/pipeit) | ![pyversions](https://img.shields.io/pypi/pyversions/pipeit.svg) | ![Publish](https://github.com/GoodManWEN/pipeit/workflows/Publish/badge.svg) | ![Build](https://github.com/GoodManWEN/pipeit/workflows/Build/badge.svg)\n\n\nLet's use python functional programming like Unix pipe! \n\nInspired by [abersheeran/only-pipe](https://github.com/abersheeran/only-pipe) , [czheo/syntax_sugar_python](https://github.com/czheo/syntax_sugar_python) , [pipetools](https://pypi.org/project/pipetools/)\n\n## Install\n\n    pip install pipeit\n\n## Usage\n- Statements start with `PIPE` and end with `END` **OR** you can even ellipsis them.\n- There're only two objects(`PIPE` & `END`) and three types(`Filter` ,`Map` & `Reduce`) in namespace, so feel free to use `from pipeit import *`.\n- Convert filter into tuple or capital the first letter, e.g. `map(lambda x:x + 1) => (map , lambda x:x + 1)` or `Map(lambda x:x + 1)` , however **DO NOT MIX USE THEM**.\n- It'll be 10% ~ 20% faster using the original python functional way than using these wrappers. \n\n## Example\n\n```Python\n>>> from pipit import PIPE , END , Map , Filter , Reduce\n\n>>> data = PIPE | range(10) | (map , lambda x:x + 1) | (map , str) | list | END\n>>> data\n['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\n# (map , lambda x:x + 1) equals to Map(lambda x:x + 1)\n>>> func = lambda x: PIPE | range(x) | Map(lambda x:x + 1) | Map(str) | list | END\n>>> func(10)\n['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n```\n\nOr you may want a more easy use.\n```Python\n>>> range(10) | Filter(lambda x:x<5) | list\n[0, 1, 2, 3, 4]\n\n>>> for _ in range(3) | Map(str):\n        print(repr(_))\n\n\n'0'\n'1'\n'2'\n```\n"}